/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { GraphQLUpload } from "graphql-upload";
import { FileUpload } from "src/storage/base/storage.types";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EInvoice } from "./EInvoice";
import { EInvoiceCountArgs } from "./EInvoiceCountArgs";
import { EInvoiceFindManyArgs } from "./EInvoiceFindManyArgs";
import { EInvoiceFindUniqueArgs } from "./EInvoiceFindUniqueArgs";
import { CreateEInvoiceArgs } from "./CreateEInvoiceArgs";
import { UpdateEInvoiceArgs } from "./UpdateEInvoiceArgs";
import { DeleteEInvoiceArgs } from "./DeleteEInvoiceArgs";
import { Order } from "../../order/base/Order";
import { EInvoiceService } from "../eInvoice.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EInvoice)
export class EInvoiceResolverBase {
  constructor(
    protected readonly service: EInvoiceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EInvoice",
    action: "read",
    possession: "any",
  })
  async _eInvoicesMeta(
    @graphql.Args() args: EInvoiceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EInvoice])
  @nestAccessControl.UseRoles({
    resource: "EInvoice",
    action: "read",
    possession: "any",
  })
  async eInvoices(
    @graphql.Args() args: EInvoiceFindManyArgs
  ): Promise<EInvoice[]> {
    return this.service.eInvoices(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EInvoice, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EInvoice",
    action: "read",
    possession: "own",
  })
  async eInvoice(
    @graphql.Args() args: EInvoiceFindUniqueArgs
  ): Promise<EInvoice | null> {
    const result = await this.service.eInvoice(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EInvoice)
  @nestAccessControl.UseRoles({
    resource: "EInvoice",
    action: "create",
    possession: "any",
  })
  async createEInvoice(
    @graphql.Args() args: CreateEInvoiceArgs
  ): Promise<EInvoice> {
    return await this.service.createEInvoice({
      ...args,
      data: {
        ...args.data,

        order: args.data.order
          ? {
              connect: args.data.order,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EInvoice)
  @nestAccessControl.UseRoles({
    resource: "EInvoice",
    action: "update",
    possession: "any",
  })
  async updateEInvoice(
    @graphql.Args() args: UpdateEInvoiceArgs
  ): Promise<EInvoice | null> {
    try {
      return await this.service.updateEInvoice({
        ...args,
        data: {
          ...args.data,

          order: args.data.order
            ? {
                connect: args.data.order,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EInvoice)
  @nestAccessControl.UseRoles({
    resource: "EInvoice",
    action: "delete",
    possession: "any",
  })
  async deleteEInvoice(
    @graphql.Args() args: DeleteEInvoiceArgs
  ): Promise<EInvoice | null> {
    try {
      return await this.service.deleteEInvoice(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EInvoice)
  async uploadFile(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: EInvoiceFindUniqueArgs
  ): Promise<EInvoice> {
    return await this.service.uploadFile(args, file);
  }

  @graphql.Mutation(() => EInvoice)
  async deleteFile(
    @graphql.Args()
    args: EInvoiceFindUniqueArgs
  ): Promise<EInvoice> {
    return await this.service.deleteFile(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Order, {
    nullable: true,
    name: "order",
  })
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async getOrder(@graphql.Parent() parent: EInvoice): Promise<Order | null> {
    const result = await this.service.getOrder(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
